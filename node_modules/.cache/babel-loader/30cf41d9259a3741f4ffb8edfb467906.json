{"ast":null,"code":"// typist v0.1.0\n// Reliable typeOf function and related utilities.\n// (c) 2012 Ben Brooks Scholz \n// MIT Licensed.\n(function () {\n  var root = this;\n\n  var typist = function () {\n    var STRING = {\n      'type': 'string',\n      'constructor': String,\n      'prototype': '[object String]'\n    };\n    var NUMBER = {\n      'type': 'number',\n      'constructor': Number,\n      'prototype': '[object Number]'\n    };\n    var BOOLEAN = {\n      'type': 'boolean',\n      'constructor': Boolean,\n      'prototype': '[object Boolean]'\n    };\n    var ARRAY = {\n      'type': 'array',\n      'constructor': Array,\n      'prototype': '[object Array]'\n    };\n    var OBJECT = {\n      'type': 'object',\n      'constructor': Object,\n      'prototype': '[object Object]'\n    };\n    var FUNCTION = {\n      'type': 'function',\n      'constructor': Function,\n      'prototype': '[object Function]'\n    };\n\n    var typeOf = function (item) {\n      var type = typeof item;\n      var prototype;\n      if (type === 'string' || item.constructor === String) return 'string';\n      if (type === 'number' || item.constructor === Number) return 'number';\n      if (type === 'boolean' || item.constructor === Boolean) return 'boolean';\n      if (type === 'function' || item.constructor === Function) return 'function';\n      if (type === 'array' || item.constructor === Array) return 'array';\n      prototype = Object.prototype.toString.call(item);\n      if (prototype === STRING.prototype) return 'string';\n      if (prototype === NUMBER.prototype) return 'number';\n      if (prototype === BOOLEAN.prototype) return 'boolean';\n      if (prototype === FUNCTION.prototype) return 'function';\n      if (prototype === ARRAY.prototype) return 'array';\n      return 'object';\n    };\n\n    var isType = function (item, type) {\n      if (item && item.constructor === type.constructor) return true;else if (Object.prototype.toString.call(item) === type.constructor) return true;else return false;\n    };\n\n    var isString = function (item) {\n      return typeof item === 'string' ? true : isType(item, STRING);\n    };\n\n    var isNumber = function (item) {\n      return typeof item === 'number' ? true : isType(item, NUMBER);\n    };\n\n    var isBoolean = function (item) {\n      return typeof item === 'boolean' ? true : isType(item, BOOLEAN);\n    };\n\n    var isArray = function (item) {\n      return typeof item === 'array' ? true : isType(item, ARRAY);\n    };\n\n    var isFunction = function (item) {\n      return typeof item === 'function' ? true : isType(item, FUNCTION);\n    };\n\n    var isObject = function (item) {\n      return isType(item, OBJECT);\n    }; // To build an 'isType' function for any type, use buildIsType.\n    // We can build one for typed arrays of 8 bit signed integers.\n    //\n    // var isInt8Array = buildIsType('Int8Array', Int8Array);\n    //\n    // The first argument is the name of the type as a string.\n    // It is used to build to string returned by the call to\n    //\n    // Object.prototype.toString.call(item);\n    //\n    // The case of the type string is corrected automatically.\n    //\n    // 'Int8Array' becomes '[object Int8Array]'\n    // 'int8Array' becomes '[object Int8Array]'\n    //\n    // The second argument is the constructor function of the type.\n    //\n    // As another example, we can construct any of the primitive type\n    // identifying functions.\n    //\n    // var isNumber = buildIsType('number', Number);\n    // var isArray = buildIsType('array', Array);\n    // \n    // These constructed versions are less efficient than the ones provided\n    // below since the type operator will never succeed (the types you construct \n    // will assume that `typeof yourObj` returns 'object').\n    //\n\n\n    var buildIsType = function (type, constructor) {\n      return function (item) {\n        return isType(item, buildType(type, constructor));\n      };\n    };\n\n    var buildType = function (type, constructor) {\n      var upperCaseType = type[0].toUpperCase() + type.slice(1, type.length);\n      var prototype = '[object ' + upperCaseType + ']';\n      return {\n        'type': 'object',\n        'constructor': constructor,\n        'prototype': prototype\n      };\n    };\n\n    return {\n      typeOf: typeOf,\n      isString: isString,\n      isNumber: isNumber,\n      isBoolean: isBoolean,\n      isArray: isArray,\n      isFunction: isFunction,\n      isObject: isObject,\n      buildIsType: buildIsType\n    };\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = typist();\n  }\n\n  root.typist = typist();\n})();","map":null,"metadata":{},"sourceType":"script"}